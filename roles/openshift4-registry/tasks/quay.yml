- tags: always
  include_vars: "{{ item }}"
  with_items:
    - quay-vars.yml
    - versions.yml

- name: "sub/quay-operator"
  kubernetes.core.k8s:
    definition:
      apiVersion: operators.coreos.com/v1alpha1
      kind: Subscription
      metadata:
        name: quay-operator
        # Most (though not all) documentation to be found under
        # https://access.redhat.com/documentation/en-us/red_hat_quay/3.9
        # recommends installing into this namespace, whereby the
        # operator will be granted all-namespace access by the
        # already-existing `OperatorGroup/global-operators` of the
        # same namespace. If we wanted to move the registry operator
        # into its own namespace, experimentation suggests that it
        # would require us to craft a suitable `OperatorGroup` object
        # as well (like we do in
        # ../../openshift4-hub/tasks/hub-operator.yml), lest the
        # operator fail to install (status “Unknown” in the UI at
        # Operators > Installed Operators)
        namespace: "openshift-operators"
      spec:
        sourceNamespace: openshift-marketplace
        source: redhat-operators
        name: quay-operator
        installPlanApproval: Automatic
        channel: "{{ quay_channel }}"

- name: Wait for QuayRegistry custom resource definition (CRD) to become available
  register: _oc_get_quayregistry
  until: _oc_get_quayregistry is success
  retries: 12
  delay: 10
  changed_when: false
  shell:
      cmd: oc get QuayRegistry

- name: "namespace/{{ quay_namespace }}"
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ quay_namespace }}"

- name: Quay configuration (YAML)
  # Note: changes here take a few minutes to propagate, because the
  # `si-registry-quay-app-XXXX-YYYY` pods don't use this Secret
  # directly. Rather, they consume another Secret that the operator
  # derives from this one (and rolls out as part of a new Deployment
  # etc.)
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: si-registry-config-bundle
        namespace: "{{ quay_namespace }}"
      type: Opaque
      stringData:
        config.yaml: |
          SERVER_HOSTNAME: {{ quay_hostname }}
          ENTERPRISE_LOGO_URL: https://www.epfl.ch/wp/6/wp-content/themes/wp-theme-2018/assets/svg/epfl-logo.svg

          # https://access.redhat.com/documentation/fr-fr/red_hat_quay/3/html/configure_red_hat_quay/config-fields-intro#config-fields-storage-aws
          DISTRIBUTED_STORAGE_CONFIG:
            s3Storage:
              - S3Storage
              - host: {{ inventory_quay_credentials.s3.endpoint_host }}
                s3_bucket: {{ inventory_quay_credentials.s3.bucket_name }}
                s3_access_key: {{ inventory_quay_credentials.s3.access_key_id }}
                s3_secret_key: {{ inventory_quay_credentials.s3.secret_key }}
                storage_path: /quay/si-registry/registry
          DISTRIBUTED_STORAGE_DEFAULT_LOCATIONS: []
          DISTRIBUTED_STORAGE_PREFERENCE:
            - s3Storage

          FEATURE_DIRECT_LOGIN: false
          FEATURE_SATOSA_LOGIN: true
          SATOSA_LOGIN_CONFIG:
              CLIENT_ID: si-quay
              CLIENT_SECRET: si-quay
              OIDC_SERVER: https://{{ quay_hostname }}/
              SERVICE_NAME: Tequila
              LOGIN_SCOPES:
                - openid
                - email
                - profile
                - tequila

          FEATURE_TEAM_SYNCING: true
          # Because why not?
          FEATURE_NONSUPERUSER_TEAM_SYNCING_SETUP: true
          TEAM_RESYNC_STALE_TIME: 60m
          FEATURE_SUPERUSERS_ORG_CREATION_ONLY: true

          # From what I gathered during RTFS, one can set
          # AUTHENTICATION_TYPE independently of FEATURE_FOO_LOGIN, in
          # which case (despite the name) that setting regulates
          # authorization instead: i.e. synchronous superuser checks,
          # team membership sync source.
          AUTHENTICATION_TYPE: LDAP
          LDAP_URI: ldaps://scoldap.epfl.ch/
          LDAP_BASE_DN:
            - "OU=users"
            - "O=epfl"
            - "C=ch"
          LDAP_SUPERUSER_FILTER: >-
            (memberof={{ _superuser_sgroup }})
          LDAP_ADMIN_DN: {{ inventory_quay_credentials.ldap.bind_dn }}
          LDAP_ADMIN_PASSWD: {{ inventory_quay_credentials.ldap.bind_password }}
          # Disables the “Please Verify” pop-up, as there is no way that it could to
          # the right thing with Tequila:
          FRESH_LOGIN_TIMEOUT: 365d
          {# The remainder below was cargo-culted from the operator's
           # default configuration: #}
          ALLOW_PULLS_WITHOUT_STRICT_LOGGING: false
          DEFAULT_TAG_EXPIRATION: 2w
          FEATURE_BUILD_SUPPORT: false
          FEATURE_MAILING: false
          REGISTRY_TITLE: Red Hat Quay
          REGISTRY_TITLE_SHORT: Red Hat Quay
          SETUP_COMPLETE: true
          TAG_EXPIRATION_OPTIONS:
          - 2w
          TESTING: false
  vars:
    _superuser_sgroup: >-
      {{ lookup("scoldap", quay_access_groups.superusers,
      by="cn", get="uniqueidentifier") }}

- name: Quay registry
  kubernetes.core.k8s:
    definition:
      apiVersion: quay.redhat.com/v1
      kind: QuayRegistry
      metadata:
        name: si-registry
        namespace: "{{ quay_namespace }}"
      spec:
        configBundleSecret: si-registry-config-bundle
        components:
          - kind: quay
            managed: true
            overrides: >-
              {{ _debuglog_overrides if (quay_debug | default(False)) else {} }}
      # The default configuration sets all other `spec.components` to
      # `managed: true`, except for the object storage; which is
      # exactly what we want.
  register: _quay_registry
  vars:
    _debuglog_overrides:
      env:
        - name: DEBUGLOG
          value: "true"

- name: Wait for Quay pods to go into running state
  changed_when: false
  register: _oc_exec_quay_app
  retries: >-
    {{ 20
    if _quay_registry is changed else 1 }}
  delay: 60
  until: _oc_exec_quay_app is success
  shell:
    cmd: |
      oc -n {{ quay_namespace}} exec -i {{ quay_pod_names[0] }} -- true

- vars:
    ansible_connection: oc
    ansible_oc_pod: "{{ quay_pod_names[0] }}"
    ansible_oc_container: "quay-app"
    ansible_remote_tmp: /tmp
    ansible_python_interpreter: /usr/bin/python3

  # 💡 To explore the Flask object model, try
  #
  #   oc -n redhat-quay exec -it $(oc -n redhat-quay get pod -o name |grep -e -quay-app- | head -1) -- flask shell
  #
  #   import data
  #   import peewee
  #   [getattr(data.database, t) for t in dir(data.database)
  #    if isinstance(getattr(data.database, t), peewee.ModelBase) ]
  #
  # Choose one of the `peewee.ModelBase` instances so returned, and then say e.g.
  #
  #   list(data.database.OAuthApplication.select())
  #
  block:
    - name: "Delete {{ quay_bridge_organization_name }} organization"
      tags:
        - openshift.quay.server.organization.delete
      when: >-
        "openshift.quay.server.organization.delete" in ansible_run_tags
      flask_script:
        script: |
          from data.model.user import User, delete_user

          org_name = "{{ quay_bridge_organization_name }}"

          try:
            if delete_user(User.get(User.username == org_name), []):
              signal_changed("Deleted organization (user) %s" % org_name)
            else:
              raise "Unable to delete organization (user) %s" % org_name
          except User.DoesNotExist:
            log("User (organization) %s not found" % org_name)
            pass

    - name: "{{ quay_bridge_organization_name }} organization"
      flask_script:
        postcondition_class: |
          from data.model import user, InvalidOrganizationException
          from data.model.organization import get_organization

          org_name = "{{ quay_bridge_organization_name }}"
          org_email = "{{ quay_bridge_organization_email }}"

          class QuayOrganization(Postcondition):
            def holds(self):
              try:
                get_organization(org_name)
                return True
              except InvalidOrganizationException:
                return False

            def enforce(self):
              # Paraphrased from `data.model.organization.create_organization`,
              # except without the part where an organization must have an owner:
              org = user.create_user_noverify(
                org_name, org_email, email_required=True, is_possible_abuser=False)
              org.organization = True
              org.save()
              signal_changed("%s organization created" % org_name)

    - name: "OAuth application for {{ quay_bridge_organization_name }} organization"
      flask_script:
        postcondition_class: |
          from data.database import OAuthApplication, User
          from data.model.organization import get_organization
          from data.model.oauth import create_application

          org_name       = "{{ quay_bridge_organization_name }}"
          oauth_app_name = "{{ quay_bridge_oauth_app_name }}"

          class OAuthApplicationPostcondition(Postcondition):
            def holds(self):
              return 1 == len(
                OAuthApplication.select().join(User)
                .where(User.username == org_name, OAuthApplication.name == oauth_app_name))

            def enforce(self):
              org = get_organization(org_name)
              create_application(org, oauth_app_name, "", "")
