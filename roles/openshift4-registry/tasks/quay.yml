- include_vars: "{{ item }}"
  with_items:
    - quay-vars.yml
    - versions.yml

- name: "sub/quay-operator"
  kubernetes.core.k8s:
    definition:
      apiVersion: operators.coreos.com/v1alpha1
      kind: Subscription
      metadata:
        name: quay-operator
        # Most (though not all) documentation to be found under
        # https://access.redhat.com/documentation/en-us/red_hat_quay/3.9
        # recommends installing into this namespace, whereby the
        # operator will be granted all-namespace access by the
        # already-existing `OperatorGroup/global-operators` of the
        # same namespace. If we wanted to move the registry operator
        # into its own namespace, experimentation suggests that it
        # would require us to craft a suitable `OperatorGroup` object
        # as well (like we do in
        # ../../openshift4-hub/tasks/hub-operator.yml), lest the
        # operator fail to install (status “Unknown” in the UI at
        # Operators > Installed Operators)
        namespace: "openshift-operators"
      spec:
        sourceNamespace: openshift-marketplace
        source: redhat-operators
        name: quay-operator
        installPlanApproval: Automatic
        channel: "{{ quay_channel }}"

- name: Wait for QuayRegistry custom resource definition (CRD) to become available
  register: _oc_get_quayregistry
  until: _oc_get_quayregistry is success
  retries: 12
  delay: 10
  changed_when: false
  shell:
      cmd: oc get QuayRegistry

- name: "namespace/{{ quay_namespace }}"
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ quay_namespace }}"

- name: Quay configuration (YAML)
  # Note: changes here take a few minutes to propagate, because the
  # `si-registry-quay-app-XXXX-YYYY` pods don't use this Secret
  # directly. Rather, they consume another Secret that the operator
  # derives from this one (and rolls out as part of a new Deployment
  # etc.)
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: si-registry-config-bundle
        namespace: "{{ quay_namespace }}"
      type: Opaque
      stringData:
        config.yaml: |
          SERVER_HOSTNAME: {{ quay_hostname }}
          ENTERPRISE_LOGO_URL: https://www.epfl.ch/wp/6/wp-content/themes/wp-theme-2018/assets/svg/epfl-logo.svg

          # https://access.redhat.com/documentation/fr-fr/red_hat_quay/3/html/configure_red_hat_quay/config-fields-intro#config-fields-storage-aws
          DISTRIBUTED_STORAGE_CONFIG:
            s3Storage:
              - S3Storage
              - host: {{ inventory_quay_s3_credentials.endpoint_host }}
                s3_bucket: {{ inventory_quay_s3_credentials.bucket_name }}
                s3_access_key: {{ inventory_quay_s3_credentials.access_key_id }}
                s3_secret_key: {{ inventory_quay_s3_credentials.secret_key }}
                storage_path: /quay/si-registry/registry
          DISTRIBUTED_STORAGE_DEFAULT_LOCATIONS: []
          DISTRIBUTED_STORAGE_PREFERENCE:
            - s3Storage

          FEATURE_DIRECT_LOGIN: false
          FEATURE_SATOSA_LOGIN: true
          SATOSA_LOGIN_CONFIG:
              CLIENT_ID: si-quay
              CLIENT_SECRET: si-quay
              OIDC_SERVER: https://tkgi-satosa.epfl.ch/
              SERVICE_NAME: Tequila
              LOGIN_SCOPES:
                - openid
                - email
                - profile

          {# The remainder below was cargo-culted from the operator's
           # default configuration: #}
          ALLOW_PULLS_WITHOUT_STRICT_LOGGING: false
          DEFAULT_TAG_EXPIRATION: 2w
          FEATURE_BUILD_SUPPORT: false
          FEATURE_MAILING: false
          REGISTRY_TITLE: Red Hat Quay
          REGISTRY_TITLE_SHORT: Red Hat Quay
          SETUP_COMPLETE: true
          TAG_EXPIRATION_OPTIONS:
          - 2w
          TEAM_RESYNC_STALE_TIME: 60m
          TESTING: false

- name: Quay registry
  kubernetes.core.k8s:
    definition:
      apiVersion: quay.redhat.com/v1
      kind: QuayRegistry
      metadata:
        name: si-registry
        namespace: "{{ quay_namespace }}"
      spec:
        configBundleSecret: si-registry-config-bundle
      # The default configuration sets all `spec.components` to
      # `managed: true`, except for the object storage; which is
      # exactly what we want.
