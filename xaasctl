#!/bin/bash

set -e

ansible_suitcase_dir () {
    if [ -f /proc/sys/fs/binfmt_misc/WSLInterop ]; then
        echo /tmp/ansible-suitcase
    else
        echo $PWD/ansible-deps-cache
    fi
}

cd "$(dirname "$0")"; cd "$(/bin/pwd)"
. "$(ansible_suitcase_dir)"/lib.sh

usage () {
    fatal <<'USAGE'

xaasctl - Manage OpenShift clusters that xaasible creates

Usage:

   xaasctl list-clusters [ -v ]
   xaasctl login-cluster DOMAINNAME
   xaasctl destroy-cluster DOMAINNAME

USAGE
}

main () {
    source_inventories

    case "$1" in
        list|list-clusters)
            shift
            list_clusters "$@"
            ;;
        login|login-cluster)
            shift
            [ $# -gt 0 ] || usage
            log_in_to_cluster "$@"
            ;;
        destroy|destroy-cluster)
            shift
            [ $# -gt 0 ] || usage
            destroy_cluster "$@"
            ;;
        *)
            usage ;;
    esac
}

source_inventories () {
    local inventory=xaasible-state-cache/xaasctl-inventory.sh

    if [ -f "$inventory" ]; then
        . "$inventory"
    else
        fatal <<PLEASE_RUN_XAASIBLE_FIRST

Fatal: the file $inventory doesn't exist.

Please run xaasible first in order to create it.

PLEASE_RUN_XAASIBLE_FIRST
    fi
}

list_clusters () {
    local name fqdn
    case "$1" in
        "")
            clusters | cut -d' ' -f2 ;;
        --undocumented-debug)
            clusters ;;
        -v|--verbose)
            clusters | while read name fqdn; do
                echo $fqdn
                local access=$(eval "cluster_${name}_access")
                echo "    access:         $access"
                case "$access" in
                    bastion)
                        local bastion_name="$(eval "cluster_${name}_bastion_name")"
                        echo -n "    bastion:        "; eval "bastion_${bastion_name}_inventory_name"
                        echo -n "    bastion IP:     "; eval "bastion_ipv4_${bastion_name}"
                        ;;
                    spoke)
                        echo -n "    hub cluster:    "; hub_fqdn_of_fqdn "$fqdn"
                        echo -n "    hub namespace:  "; eval "cluster_${name}_cluster_hub_namespace"
                        ;;
                esac
                echo
                done ;;
        *) usage ;;
    esac
}

log_in_to_cluster () {
    local fqdn=$1; shift
    cluster_of_fqdn "$fqdn" >/dev/null  # Checks existence
    local cluster="$(cluster_of_fqdn "$fqdn")"

    # Molly-guard against the Ansible configuration-as-code crossing its streams:
    case "$KUBECONFIG" in
        ""|*"$fqdn"*)  : ;;
        */xaasible-state-cache/*) fatal <<MOLLY_GUARD ;;

FATAL: \`xaasctl login-cluster\` is being used to attempt to log into
$fqdn, while the KUBECONFIG environment
variable is $KUBECONFIG.

MOLLY_GUARD
    esac

    case "$(eval "cluster_${cluster}_access")" in
        bastion) log_in_to_cluster__bastion "$fqdn" "$@" ;;
        spoke)   log_in_to_cluster__spoke   "$fqdn" "$@" ;;
        *)
            echo >&2 "Virtual dispatch whatever, something's broken!"
            exit 1 ;;
    esac
}

log_in_to_cluster__spoke () {
    local fqdn=$1; shift

    local cluster="$(cluster_of_fqdn "$fqdn")"
    local namespace="$(eval "cluster_${cluster}_cluster_hub_namespace")"
    local server="$(cluster_k8s_api_endpoint "$fqdn")"
    local ca_bundle="$(eval "cluster_${cluster}_ca_bundle")"

    local subkubeconfig
    local fqdn_hub="$(hub_fqdn_of_fqdn "$fqdn")"
    case "$KUBECONFIG" in
        *xaasible-state-cache/*)
            subkubeconfig="$PWD/xaasible-state-cache/kubeconfig-$fqdn_hub"
            # There used to be a time when this here case statement
            # didn't exist... Which means that *some*
            # xaasible-state-cache/kubeconfig's out there contain
            # unwanted credentials.
            local context_name
            oc config get-contexts -o name | while read context_name; do
                if echo "$context_name" | grep -q "$fqdn"; then
                    oc config use-context "$context_name"
                else
                    oc config delete-context "$context_name"
                fi
            done
            ;;
        *)
            subkubeconfig="$KUBECONFIG" ;;
    esac

    local secret_name

    (
        export KUBECONFIG="$subkubeconfig"
        log_in_to_cluster__bastion "$fqdn_hub" >/dev/null
        oc get secret -o name -n "$namespace"
    ) | while read secret_name; do
        case "$secret_name" in
            secret/*-admin-password)
                local username="$(KUBECONFIG=$subkubeconfig oc get -n "$namespace" "$secret_name" \
                  -o go-template --template="{{.data.username | base64decode}}")"
                local password="$(KUBECONFIG=$subkubeconfig oc get -n "$namespace" "$secret_name" \
                  -o go-template --template="{{.data.password | base64decode}}")"
                oc login --certificate-authority="$ca_bundle" \
                     -u "$username" --password="$password" --server="$server"
                exit 0 ;;
        esac
    done
}

log_in_to_cluster__bastion () {
    local fqdn=$1; shift
    local cluster="$(cluster_of_fqdn "$fqdn")"

    local keybase_password_store="/keybase/team/epfl_idevfsd/INC0634627/kubeadmin-passwords.json"
    local saved_username="$( jq -r ".[\"$fqdn\"].user"     < $keybase_password_store || true )"
    local saved_password="$( jq -r ".[\"$fqdn\"].password" < $keybase_password_store || true )"
    if [ -n "$saved_username" ]; then
        local url="$(cluster_openshift_basicauth_endpoint "$fqdn")"
        local token="$(curl -v -k --user "$saved_username:$saved_password" --header "X-CSRF-Token: 1" --url $url 2>&1 | grep -o "access_token=[^&]*" |cut -d= -f2)"
    else
        local token=$(ssh_bastion_in_cluster_dir "$fqdn" 'curl -v -k --user kubeadmin:$(cat auth/kubeadmin-password) --header "X-CSRF-Token: 1" --url '"$(cluster_openshift_basicauth_endpoint "$fqdn" | sed 's/&/\\&/')"' 2>&1 | grep -o "access_token=[^\&]*" |cut -d= -f2')
    fi
    local server="$(cluster_k8s_api_endpoint "$fqdn")"
    local ca_bundle="$(eval "cluster_${cluster}_ca_bundle")"
    oc login --certificate-authority="$ca_bundle" --token="$token" --server="$server"
}

destroy_cluster () {
    local fqdn=$1; shift
    local cluster="$(cluster_of_fqdn "$fqdn")"
    case "$(eval "cluster_${cluster}_access")" in
        bastion) destroy_cluster__bastion "$fqdn" "$@" ;;
        spoke)   destroy_cluster__spoke   "$fqdn" "$@" ;;
        *)
            echo >&2 "Virtual dispatch whatever, something's broken!"
            exit 1 ;;
    esac
}

destroy_cluster__bastion () {
    local fqdn=$1; shift
    bastion_of_fqdn "$fqdn" >/dev/null  # Checks existence
    local bastion="$(bastion_of_fqdn "$fqdn")"
    cluster_of_fqdn "$fqdn" >/dev/null  # Checks existence
    local cluster="$(cluster_of_fqdn "$fqdn")"
    cat >&2 <<WHOA

Whoa.

Would you be so kind as to copy and paste the following commands in your shell:

   ssh root@$(eval "bastion_ipv4_${bastion}") openshift-install destroy cluster --dir $(eval "cluster_${cluster}_ocp_config_dir")
   ssh root@$(eval "bastion_ipv4_${bastion}") rm -rf $(dirname $(eval "cluster_${cluster}_ocp_config_dir"))


... cause I sure ain't doing that for you.

WHOA
}

destroy_cluster__spoke () {
    local fqdn=$1; shift
    cluster_of_fqdn "$fqdn" >/dev/null  # Checks existence

    log_in_to_cluster "$(hub_fqdn_of_fqdn "$fqdn")" >/dev/null

    local cluster="$(cluster_of_fqdn "$fqdn")"
    local ns="$(eval cluster_${cluster}_cluster_hub_namespace)"
    cat >&2 <<WHOA

Whoa.

Would you be so kind as to copy and paste the following commands in your shell:

   oc -n $ns delete clusterdeployment $ns
   oc delete managedcluster $ns
   oc delete namespace $ns

... cause I sure ain't doing that for you.

WHOA
}

clusters () {
    set | sed -n -e 's/^cluster_\([^=]*\)_fqdn=\(.*\)/\1 \2/p'
}

bastion_of_fqdn () {
    local fqdn=$1; shift
    local _cluster_name _fqdn
    clusters | {
        while read _cluster_name _fqdn; do
            if [ "$fqdn" = "$_fqdn" ]; then
                echo "$(eval "cluster_${_cluster_name}_bastion_name")"
                exit 0
            fi
        done
        fatal "Unknown FQDN: $fqdn - try: $0 list-clusters"
    }
}

cluster_of_fqdn () {
    local fqdn=$1; shift
    local _cluster_name _fqdn
    clusters | {
        while read _cluster_name _fqdn; do
            if [ "$fqdn" = "$_fqdn" ]; then
                echo "$_cluster_name"
                return 0
            fi
        done
        fatal "Unknown FQDN: $fqdn - try: $0 list-clusters"
    }
}

hub_fqdn_of_fqdn () {
    local fqdn="$1"; shift
    local name fqdn
    clusters | while read name fqdn_; do
        if [ "$fqdn_" = "$fqdn" ]; then
            local hub_cluster_name="$(eval "cluster_${name}_cluster_hub_name")"
            eval echo \$"cluster_${hub_cluster_name}_fqdn"
            exit 0
        fi
    done
}

ssh_bastion () {
    local bastion_name=$1; shift
    ssh -o strictHostKeyChecking=no root@"$(eval "bastion_ipv4_${bastion_name}")" "$@"
}

ssh_bastion_in_cluster_dir () {
    local fqdn=$1; shift
    cluster_of_fqdn "$fqdn" >/dev/null  # Checks existence
    local cluster="$(cluster_of_fqdn "$fqdn")"
    bastion_of_fqdn "$fqdn" >/dev/null  # Checks existence
    local bastion="$(bastion_of_fqdn "$fqdn")"
    ssh_bastion "$bastion" "cd $(eval cluster_${cluster}_ocp_config_dir) && $*"
}

cluster_ingress_domain () {
    local fqdn=$1; shift
    echo "apps.$fqdn"
}

cluster_openshift_basicauth_endpoint () {
    local fqdn=$1; shift
    echo "https://oauth-openshift.$(cluster_ingress_domain "$fqdn")/oauth/authorize?response_type=token&client_id=openshift-challenging-client"
}

cluster_k8s_api_endpoint () {
    echo "https://api.${fqdn}:6443"
}

####################################################################

main "$@"
