#!/bin/bash

set -e

cd "$(dirname "$0")"; cd "$(/bin/pwd)"
. "$PWD"/ansible-deps-cache/lib.sh

usage () {
    fatal <<'USAGE'

xaasctl - Manage OpenShift clusters that xaasible creates

Usage:

   xaasctl list-clusters [ -v ]
   xaasctl login-cluster DOMAINNAME
   xaasctl destroy-cluster DOMAINNAME

USAGE
}

main () {
    source_inventories

    case "$1" in
        list|list-clusters)
            shift
            list_clusters "$@"
            ;;
        login|login-cluster)
            shift
            [ $# -gt 0 ] || usage
            log_in_to_cluster "$@"
            ;;
        destroy|destroy-cluster)
            shift
            [ $# -gt 0 ] || usage
            destroy_cluster "$@"
            ;;
        *)
            usage ;;
    esac
}

source_inventories () {
    local inventory=xaasible-state-cache/xaasctl-inventory.sh

    if [ -f "$inventory" ]; then
        . "$inventory"
    else
        fatal <<PLEASE_RUN_XAASIBLE_FIRST

Fatal: the file $inventory doesn't exist.

Please run xaasible first in order to create it.

PLEASE_RUN_XAASIBLE_FIRST
    fi
}

list_clusters () {
    case "$1" in
        "")
            clusters | cut -d' ' -f2 ;;
        --undocumented-debug)
            clusters ;;
        -v|--verbose)
            clusters | while read name fqdn bastion_name; do
                echo $fqdn
                echo -n "    bastion:    "; eval "bastion_${bastion_name}_inventory_name"
                echo -n "    bastion IP: "; eval "bastion_ipv4_${bastion_name}"
            done ;;
        *) usage ;;
    esac
}

log_in_to_cluster () {
    local fqdn=$1; shift
    cluster_of_fqdn "$fqdn" >/dev/null  # Checks existence
    local cluster="$(cluster_of_fqdn "$fqdn")"
    local token=$(ssh_bastion_in_cluster_dir "$fqdn" 'curl -v -k --user kubeadmin:$(cat auth/kubeadmin-password) --header "X-CSRF-Token: 1" --url '"$(cluster_openshift_basicauth_endpoint "$fqdn" | sed 's/&/\\&/')"' 2>&1 | grep -o "access_token=[^\&]*" |cut -d= -f2')
    local server="$(cluster_k8s_api_endpoint "$fqdn")"
    local ca_bundle="$(eval "cluster_${cluster}_ca_bundle")"
    oc login --certificate-authority="$ca_bundle" --token="$token" --server="$server"
}

destroy_cluster () {
    local fqdn=$1; shift
    bastion_of_fqdn "$fqdn" >/dev/null  # Checks existence
    local bastion="$(bastion_of_fqdn "$fqdn")"
    cluster_of_fqdn "$fqdn" >/dev/null  # Checks existence
    local cluster="$(cluster_of_fqdn "$fqdn")"
    cat >&2 <<WHOA

Whoa.

Would you be so kind as to copy and paste the following commands in your shell:

   ssh root@$(eval "bastion_ipv4_${bastion}") openshift-install destroy cluster --dir $(eval "cluster_${cluster}_ocp_config_dir")
   ssh root@$(eval "bastion_ipv4_${bastion}") rm -rf $(dirname $(eval "cluster_${cluster}_ocp_config_dir"))


... cause I sure ain't doing that for you.

WHOA
}
clusters () {
    set | sed -n -e 's/^cluster_\([^=]*\)_fqdn=\(.*\)/\1 \2/p' | while read cluster_name fqdn; do
        echo "$cluster_name $fqdn $(eval "cluster_${cluster_name}_bastion_name")"
    done
}

bastion_of_fqdn () {
    local fqdn=$1; shift
    clusters | {
        while read _cluster_name _fqdn _response; do
            if [ "$fqdn" = "$_fqdn" ]; then
                echo "$_response"
                exit 0
            fi
        done
        fatal "Unknown FQDN: $fqdn - try: $0 list-clusters"
    }
}

cluster_of_fqdn () {
    local fqdn=$1; shift
    clusters | {
        while read _cluster_name _fqdn _response; do
            if [ "$fqdn" = "$_fqdn" ]; then
                echo "$_cluster_name"
                return 0
            fi
        done
        fatal "Unknown FQDN: $fqdn - try: $0 list-clusters"
    }
}

ssh_bastion () {
    local bastion_name=$1; shift
    ssh -o strictHostKeyChecking=no root@"$(eval "bastion_ipv4_${bastion_name}")" "$@"
}

ssh_bastion_in_cluster_dir () {
    local fqdn=$1; shift
    cluster_of_fqdn "$fqdn" >/dev/null  # Checks existence
    local cluster="$(cluster_of_fqdn "$fqdn")"
    bastion_of_fqdn "$fqdn" >/dev/null  # Checks existence
    local bastion="$(bastion_of_fqdn "$fqdn")"
    ssh_bastion "$bastion" "cd $(eval cluster_${cluster}_ocp_config_dir) && $*"
}

cluster_ingress_domain () {
    local fqdn=$1; shift
    echo "apps.$fqdn"
}

cluster_openshift_basicauth_endpoint () {
    local fqdn=$1; shift
    echo "https://oauth-openshift.$(cluster_ingress_domain "$fqdn")/oauth/authorize?response_type=token&client_id=openshift-challenging-client"
}

cluster_k8s_api_endpoint () {
    echo "https://api.${fqdn}:6443"
}

####################################################################

main "$@"
