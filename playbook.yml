- name: "init: first things first"
  hosts: localhost
  gather_facts: no
  roles:
    - role: roles/init

- name: "bastion-vm: configure bastion VM(s)"
  hosts: bastions
  gather_facts: no
  roles:
    - role: roles/bastion-vm
      vars:
        ansible_user: root
        ansible_connection: ssh
        ansible_host_key_checking: false
        # ansible_ssh_host is set in roles/bastion-vm/tasks/bastion-get-IP.yml

- name: "openshift4-bootstrap: bootstrap cluster(s) from bastions"
  hosts: openshift_hub_clusters
  gather_facts: no
  roles:
    - role: roles/openshift4-bootstrap
      vars:
        # During bootstrap, “steal” the Ansible / vSphere connection
        # parameters from the underlying bastion VM:
        ansible_host:                  "{{ hostvars[inventory_bastion].ansible_host }}"
        ansible_user: root        # As in roles/bastion-vm, above
        ansible_connection: ssh   # Ditto
        vsphere_credentials: "{{ hostvars[inventory_bastion].inventory_vsphere_credentials }}"

- name: "openshift4-hub: for clusters that can create clusters"
  hosts: openshift_hub_clusters
  gather_facts: no
  roles:
    - role: roles/openshift4-hub
      vars:
        # Now that boostrap is over, we no longer want to go through
        # the bastion to talk to clusters:
        ansible_connection: local
        ansible_python_interpreter: "{{ xaasible_python_shim }}"

- name: "openshift4-spoke: managed clusters"
  hosts: openshift_spoke_clusters
  gather_facts: no
  pre_tasks:
    - tags: always   # There is a `tag: always` task down below in the role
      run_once: true
      xaasctl_login_cluster:
        to_cluster: "{{ inventory_hub_cluster }}"
  roles:
    - role: roles/openshift4-spoke
      # Unless specified otherwise in the role files, we talk to the
      # *hub* cluster when installing or reconnecting to spokes.
      environment:
        KUBECONFIG: '{{ spoke_kubeconfig_of_hub }}'
      vars:
        spoke_kubeconfig_of_hub: >-
          {{ hostvars[inventory_hub_cluster].xaasible_kubeconfig }}
        ansible_connection: local
        ansible_python_interpreter: "{{ xaasible_python_shim }}"
        # TODO: this assumes that all hubs have a bastion (and is
        # quite clunky to boot). Refactor
        vsphere_credentials: >-
          {{ hostvars[_bastion_inventory_name].inventory_vsphere_credentials }}
        _bastion_inventory_name: >-
            {{ hostvars[_hub_cluster_inventory_name].inventory_bastion }}
        _hub_cluster_inventory_name: >-
          {{ hostvars[inventory_hostname].inventory_hub_cluster }}

- name: "openshift4-registry: install and configure the image registry"
  hosts: openshift_clusters
  gather_facts: no
  pre_tasks:
    - tags: always
      when: >-
        (ansible_run_tags | select("prefix", "openshift.quay") | length > 0)
        or
        (ansible_run_tags | length == 0)
      xaasctl_login_cluster: {}
  roles:
    - role: roles/openshift4-registry
      vars:
        ansible_connection: local
        ansible_python_interpreter: "{{ xaasible_python_shim }}"
      environment:
        KUBECONFIG: "{{ xaasible_kubeconfig }}"

- name: "openshift4-access: control access by people"
  hosts: openshift_clusters
  gather_facts: no
  pre_tasks:
    - tags: always
      when: >-
        (ansible_run_tags | select("prefix", "openshift.auth") | length > 0)
        or
        (ansible_run_tags | length == 0)
      xaasctl_login_cluster: {}
  roles:
    - role: roles/openshift4-access
      vars:
        ansible_connection: local
        ansible_python_interpreter: "{{ xaasible_python_shim }}"
      environment:
        KUBECONFIG: "{{ xaasible_kubeconfig }}"

- name: "openshift4-security: control access by programs"
  hosts: openshift_clusters
  gather_facts: no
  pre_tasks:
    - tags: always
      when: >-
        (ansible_run_tags | select("prefix", "openshift.security") | length > 0)
        or
        (ansible_run_tags | length == 0)
      xaasctl_login_cluster: {}
  roles:
    - role: roles/openshift4-security
      vars:
        ansible_connection: local
        ansible_python_interpreter: "{{ xaasible_python_shim }}"
      environment:
        KUBECONFIG: "{{ xaasible_kubeconfig }}"

- name: "openshift4-resources: control resource consumption"
  hosts: openshift_clusters
  gather_facts: no
  pre_tasks:
    - tags: always
      when: >-
        (ansible_run_tags | select("prefix", "openshift.resources") | length > 0)
        or
        (ansible_run_tags | length == 0)
      xaasctl_login_cluster: {}
  roles:
    - role: roles/openshift4-resources
      vars:
        ansible_connection: local
        ansible_python_interpreter: "{{ xaasible_python_shim }}"
      environment:
        KUBECONFIG: "{{ xaasible_kubeconfig }}"
